(()=>{var e={720:(e,t,s)=>{"use strict";s.r(t)},768:function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(s(84)),r=i(s(599));s(720);const a=s(686),l=s(996),o=i(s(106)),c=i(s(234)),d=i(s(291)),g=i(s(647));n.default.registerLanguage("css",r.default),t.default=class{constructor(){this.levelHeader=document.createElement("h1"),this.levelsBlock=document.createElement("div"),this.body=document.body,this.levels=new o.default,this.blanket=new c.default(this.levels),this.viewerBlock=new d.default,this.containerTransformCoordinates="translate(-60.000000, -7521.000000)",this.secondContainerTransformCoordinates="translate(56.000000, 160.000000)"}draw(){this.drawGameBlock(),this.levelsBlock.classList.add("levelsBlock"),this.levels.drawLevelsBlock(this.levelsBlock),document.body.append(this.levelsBlock)}drawHeader(e){const t=(0,l.createElement)("div",["headerLine"],e);(0,l.createElement)("h1",["header"],t,"Summer CSS");const s=(0,l.createElement)("div",["socialBlock"],t);(0,l.createElement)("span",["header"],s,"Share");const i=this.renderIcon(a.mailData);s.append(i);const n=this.renderIcon(a.fbData);s.append(n);const r=this.renderIcon(a.twitterData);s.append(r);const o=(0,l.createElement)("div",["burgerIcon"],s);let c=0;for(;c<3;)(0,l.createElement)("span",["burgerIconLine"],o),c+=1;return o}drawCodeField(e){this.levelHeader.classList.add("levelHeader"),this.levelHeader.textContent="Select the slates",e.append(this.levelHeader),this.blanket.draw(e),this.blanket.drawLevelItems(this.levels.activeLevel);const t=(0,l.createElement)("div",["codeField"],e),s=(0,l.createElement)("div",["editorHeaderLine"],t);(0,l.createElement)("span",["editorTitle"],s,"CSS Editor"),(0,l.createElement)("span",["subtitle"],s,"style.css");const i=(0,l.createElement)("div",["viewerHeaderLine"],t);(0,l.createElement)("span",["viewerTitle"],i,"HTML Viewer"),(0,l.createElement)("span",["subtitle"],i,"beach.html");const r=(0,l.createElement)("div",["numbers","editorNums"],t);for(let e=0;e<20;e+=1)(0,l.createElement)("span",["num"],r,(e+1).toString(10));const a=(0,l.createElement)("div",["codingFieldBlock"],t),o=(0,l.createElement)("div",["numbers","viewerNums"],t);for(let e=0;e<20;e+=1)(0,l.createElement)("span",["num"],o,(e+1).toString(10));new g.default(this.levels,this.blanket).draw(a,t);const c=(0,l.createElement)("pre",["codeText"],a,"{\n /* Style would go here. */ \n}");n.default.highlightElement(c),this.viewerBlock.draw(t,this.levels.activeLevel)}drawFooter(e){const t=(0,l.createElement)("div",["footer"],e),s=(0,l.createElement)("div",["ghContainer"],t),i=this.renderIcon(a.ghData);s.append(i),(0,l.createElement)("a",["ghLink"],s,"@CoracaoDoMundo").href="https://github.com/CoracaoDoMundo",(0,l.createElement)("span",["year"],t,"Â© 2023");const n=(0,l.createElement)("a",["rsLogoLink"],t);n.setAttribute("href","https://rs.school");const r=this.renderIcon(a.rsData);n.append(r)}drawGameBlock(){const e=(0,l.createElement)("div",["gameBlock"],document.body),t=(0,l.createElement)("div",["burgerShadow"],e),s=this.drawHeader(e);this.drawCodeField(e),this.drawFooter(e),this.openMenuByBurgerIcon(s,this.levelsBlock,t)}placeIcon(e,t,s,i,n){0===t.gQuantity?e.append(n):1===t.gQuantity&&(e.append(s),s.append(n)),2===t.gQuantity&&(s.setAttribute("transform",this.containerTransformCoordinates),s.setAttribute("fill",t.color),i.setAttribute("transform",this.secondContainerTransformCoordinates),e.append(s),s.append(i),i.append(n))}renderIcon(e){const t=document.createElementNS("http://www.w3.org/2000/svg","svg");t.setAttribute("viewBox",e.viewBox),t.setAttribute("enable-background","new 0 0 64 64"),t.classList.add("icon");const s=document.createElementNS("http://www.w3.org/2000/svg","g"),i=document.createElementNS("http://www.w3.org/2000/svg","g"),n=document.createElementNS("http://www.w3.org/2000/svg","path");if(n.setAttribute("d",e.path),n.setAttribute("fill",e.color),e.pathSecond){const i=document.createElementNS("http://www.w3.org/2000/svg","path");i.setAttribute("d",e.pathSecond),i.setAttribute("fill",e.color),0===e.gQuantity?t.append(i):s.append(i)}if(e.pathThird){const s=document.createElementNS("http://www.w3.org/2000/svg","path");s.setAttribute("d",e.pathThird),s.setAttribute("fill",e.color),t.append(s)}return this.placeIcon(t,e,s,i,n),t}openMenuByBurgerIcon(e,t,s){e.addEventListener("click",(()=>{t.classList.add("menuActive"),s.classList.add("shadowActive"),this.body.classList.add("noScroll")})),t.addEventListener("click",(e=>{e.target instanceof HTMLDivElement&&(e.target.classList.contains("levelItemBlock")||(t.classList.remove("menuActive"),s.classList.remove("shadowActive"),this.body.classList.remove("noScroll")))})),s.addEventListener("click",(()=>{t.classList.remove("menuActive"),s.classList.remove("shadowActive"),this.body.classList.remove("noScroll")}))}}},956:function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),s(720);const n=i(s(768)),r=i(s(815));t.default=class{constructor(){this.layout=new n.default,this.emitter=r.default.getInstance()}start(){this.layout.draw()}}},234:function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(996),r=i(s(555)),a=s(167),l=i(s(815)),o=s(269),c=s(700),d=s(83),g=s(921),h=s(817);t.default=class{constructor(e){this.blanket=document.createElement("div"),this.items=[],this.tooltipVisible=!1,this.levels=e,this.emitter=l.default.getInstance()}draw(e){this.blanket.classList.add("blanket"),this.blanket.style.backgroundImage=`url(${r.default})`,e.append(this.blanket),this.emitter.subscribe("levelNumberChanged",(e=>{this.items=[],this.subscribeToLevelChangedEvent(e)}))}subscribeToLevelChangedEvent(e){if(e instanceof d.LevelNumberChanged){const t=e.getNumber();this.drawLevelItems(t)}}subscribeToHighlightElementEvent(e){if(e instanceof o.HighlightElement){const t=e.getElementIdent();this.highlightLinkedElement(t)}}subscribeToRemoveHighlightElementEvent(e){if(e instanceof c.RemoveHighlightElement){const t=e.getElementIdent();this.removeHighlightFromLinkedElement(t)}}drawLevelItems(e){this.blanket.innerHTML="";const t=(e,s)=>{s.forEach((s=>{let i=`${s.selector}Img`,r=`<${s.selector}></${s.selector}>`;if(s.id){const e=s.id.slice(0,1).toUpperCase()+s.id.slice(1);i=`${s.selector}${e}Img`,r=`<${s.selector} id="${s.id}"></${s.selector}>`}if(s.class){const e=s.class.slice(0,1).toUpperCase()+s.class.slice(1);if(i=`${s.selector}${e}Img`,r=`<${s.selector} class="${s.class}"></${s.selector}>`,s.attribute){const t=s.attribute.slice(0,1).toUpperCase()+s.attribute.slice(1);i=`${s.selector}${e}${t}Img`,r=`<${s.selector} class="${s.class}" attr="${s.attribute}"></${s.selector}>`}}if(s.child)if(s.child&&"blanket"===s.class)t(e,s.child);else{const a=(0,n.createElement)("div",[`${i}`,"img"],e);a.style.backgroundImage=`url(${s.img})`,this.items.push([a,r]),t(a,s.child)}else{const t=(0,n.createElement)("div",[`${i}`,"img"],e);t.style.backgroundImage=`url(${s.img})`,this.items.push([t,r]),s.target&&t.classList.add("targetItem")}}))};t(this.blanket,a.LevelsList[e]),this.personalizeItems(),this.subscribes(),this.highlightElement(),this.addTooltipOnElement()}subscribes(){this.emitter.subscribe("highlightElement",(e=>this.subscribeToHighlightElementEvent(e))),this.emitter.subscribe("removeHighlightElement",(e=>this.subscribeToRemoveHighlightElementEvent(e)))}elementsDisappearance(){this.items.forEach((e=>{e[0].classList.add("fly")}))}highlightElement(){this.items.forEach(((e,t)=>{e[0].addEventListener("mouseover",(s=>{e[0].classList.add("shadow");const i=new g.HighlightBlanketElement(`${t}`);this.emitter.emit(i),s.relatedTarget instanceof HTMLDivElement&&s.relatedTarget.classList.remove("shadow")}))})),this.items.forEach(((e,t)=>{e[0].addEventListener("mouseout",(()=>{const s=new h.RemoveHighlightBlanketElement(`${t}`);this.emitter.emit(s),e[0].classList.remove("shadow")}))}))}personalizeItems(){this.items.forEach(((e,t)=>{e[0].setAttribute("item",`${t}`)}))}addTooltipOnElement(){this.items.forEach((e=>{let t,s=!1;e[0].addEventListener("mouseover",(()=>{s||(s=!0,t=(0,n.createElement)("div",["tooltip"],e[0],e[1]))})),e[0].addEventListener("mouseout",(i=>{const n=i.relatedTarget;n&&e[0].contains(n)||t&&(e[0].removeChild(t),s=!1)}))}))}highlightLinkedElement(e){let t;this.items.forEach(((s,i)=>{const r=s[0],a=s[1];r.getAttribute("item")===e&&(t=i,this.items[t][0].classList.add("shadow"),this.tooltipVisible||(this.tooltipVisible=!0,(0,n.createElement)("div",["tooltip"],r,a)))}))}removeHighlightFromLinkedElement(e){let t,s;this.items.forEach(((i,n)=>{i[0].getAttribute("item")===e&&(t=n,this.items[t][0].classList.remove("shadow"),s=this.items[t][0].lastChild,s&&"tooltip"===s.className&&(this.items[t][0].removeChild(s),this.tooltipVisible=!1))}))}}},815:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.eventHandlers=new Map}static getInstance(){return s.instance||(s.instance=new s),s.instance}subscribe(e,t){const s=this.eventHandlers.get(e)||[];this.eventHandlers.set(e,[...s,t])}unsubscribeForEvent(e){this.eventHandlers.delete(e)}emit(e){const t=e.constructor.name.split("")[0].toLowerCase(),s=e.constructor.name.split("").map(((e,s)=>0===s?t:e)).join(""),i=this.eventHandlers.get(s);i&&i.forEach((t=>t(e)))}}t.default=s},291:function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(s(84)),r=i(s(313)),a=s(996),l=s(167),o=i(s(815)),c=s(700),d=s(269),g=s(83),h=s(921),u=s(817);n.default.registerLanguage("xml",r.default),t.default=class{constructor(){this.viewer=document.createElement("div"),this.preBlock=document.createElement("pre"),this.elements=[],this.elemSet=[],this.random="",this.emitter=o.default.getInstance()}subscribeToLevelChangedEvent(e){e instanceof g.LevelNumberChanged&&this.fillViewerField(e.getNumber())}subscribeToHighlightElementEvent(e){if(e instanceof h.HighlightBlanketElement){const t=e.getElementIdent();this.highlighElementFromBlanket(t,"highlight")}}subscribeToRemoveHighlightElementEvent(e){if(e instanceof u.RemoveHighlightBlanketElement){const t=e.getElementIdent();this.highlighElementFromBlanket(t)}}draw(e,t){this.viewer.classList.add("codeViewerBlock"),e.append(this.viewer),this.preBlock.classList.add("codeTextContainer"),this.viewer.append(this.preBlock),this.fillViewerField(t),this.emitter.subscribe("levelNumberChanged",(e=>{this.elements=[],this.elemSet=[],this.subscribeToLevelChangedEvent(e)}))}createStartElement(e,t,s,i){const n=(0,a.createElement)("div",["codeViewerText"],e,`<${t}>`);return n.setAttribute("tag",s),n.setAttribute("link",i),this.elements.push(n),this.elemSet.push(n),n}createEndElement(e,t,s,i){const n=(0,a.createElement)("div",["codeViewerText"],e,`</${t.selector}>`);return n.setAttribute("tag",s),n.setAttribute("link",i),this.elements.push(n),n}formRandomNum(e){this.random=Math.floor(100*Math.random()).toString(),e.includes(this.random)?this.random=Math.floor(100*Math.random()).toString():e.push(this.random)}styleElements(e,t,s,i){n.default.highlightElement(t),n.default.highlightElement(s),e.child&&this.drawActiveLevel(i,e.child)}drawActiveLevel(e,t){const s=[];t.forEach((t=>{let i=`${t.selector}`,r=`${t.selector}`;if(t.class&&(i+=` class="${t.class}"`,r+=` ${t.class.slice(0,1).toUpperCase()+t.class.slice(1)}`),t.attribute&&(i+=`attr="${t.attribute}"`,r+=` ${t.attribute.slice(0,1).toUpperCase()+t.attribute.slice(1)}`),t.id&&(i+=` id="${t.id}"`,r+=`${t.id.slice(0,1).toUpperCase()+t.id.slice(1)}`),t.child){this.formRandomNum(s);const n=this.createStartElement(e,i,r,this.random),l=(0,a.createElement)("div",["childrenContainer"],e),o=this.createEndElement(e,t,r,this.random);n.style.paddingLeft=`${t.nesting}rem`,o.style.paddingLeft=`${t.nesting}rem`,this.styleElements(t,n,o,l)}else{const s=(0,a.createElement)("div",["codeViewerText"],e,`<${i} />`);s.setAttribute("tag",r),this.elements.push(s),this.elemSet.push(s),s.style.paddingLeft=`${t.nesting}rem`,n.default.highlightElement(s)}}))}fillViewerField(e){this.preBlock.innerHTML="",this.drawActiveLevel(this.preBlock,l.LevelsList[e]),this.personalizeElemSet(),this.emitter.subscribe("highlightBlanketElement",(e=>this.subscribeToHighlightElementEvent(e))),this.emitter.subscribe("removeHighlightBlanketElement",(e=>this.subscribeToRemoveHighlightElementEvent(e))),this.highlightElement()}personalizeElemSet(){this.elemSet=this.elemSet.splice(1),this.elemSet.map(((e,t)=>e.setAttribute("item",`${t}`)))}highlightSiblings(e,t){if(null!==t.getAttribute("link")&&t.getAttribute("link")===e.getAttribute("link")){e.classList.add("highlight");const t=e.getAttribute("item");t&&this.emitter.emit(new d.HighlightElement(t))}t.nextSibling instanceof HTMLDivElement&&t.nextSibling.classList.contains("childrenContainer")&&t.nextSibling.classList.add("highlight"),t.previousSibling instanceof HTMLDivElement&&t.previousSibling.classList.contains("childrenContainer")&&t.previousSibling.classList.add("highlight")}removeHighlightFromSiblings(e,t){if(null!==t.getAttribute("link")&&t.getAttribute("link")===e.getAttribute("link")){e.classList.remove("highlight");const t=e.getAttribute("item");t&&this.emitter.emit(new c.RemoveHighlightElement(t))}t.nextSibling instanceof HTMLDivElement&&t.nextSibling.classList.contains("childrenContainer")&&t.nextSibling.classList.remove("highlight"),t.previousSibling instanceof HTMLDivElement&&t.previousSibling.classList.contains("childrenContainer")&&t.previousSibling.classList.remove("highlight")}highlightElement(){this.elements.forEach((e=>{e.addEventListener("mouseover",(()=>{if("div Blanket"===e.getAttribute("tag"))return;const t=e.getAttribute("item");t&&this.emitter.emit(new d.HighlightElement(t)),e.classList.add("highlight"),this.elements.forEach((t=>{this.highlightSiblings(t,e)}))}))})),this.elements.forEach((e=>{e.addEventListener("mouseout",(()=>{const t=e.getAttribute("item");t&&this.emitter.emit(new c.RemoveHighlightElement(t)),e.classList.remove("highlight"),this.elements.forEach((t=>{this.removeHighlightFromSiblings(t,e)}))}))}))}highlighElementFromBlanket(e,t){let s;this.elemSet.forEach((i=>{i.getAttribute("item")===e&&"highlight"===t?(i.classList.add("highlight"),i.getAttribute("link")&&(s=i.getAttribute("link")),this.elements.forEach((e=>{e.getAttribute("link")===s&&e.classList.add("highlight")}))):i.getAttribute("item")===e&&(i.classList.remove("highlight"),i.getAttribute("link")&&(s=i.getAttribute("link")),this.elements.forEach((e=>{e.getAttribute("link")===s&&e.classList.remove("highlight")})))}))}}},435:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RightAnswersList=void 0,t.RightAnswersList=[["slates","div slates",".blanket slates","div.blanket slates","*"],["#ropes","ring #ropes","[id=ropes]","ring:last-child"],[".hearts","glasses.hearts","glasses .hearts"],["*","slates, mask, hat","slates, hat, mask","hat, slates, mask","hat, mask, slates","mask, slates, hat","mask, hat, slates"],['[attr="butBerry"]','.fruit [attr="butBerry"]','strawberry [attr="butBerry"]','strawberry.fruit [attr="butBerry"]',"strawberry","plate strawberry"],["slates, hat, glasses","slates, glasses, hat","hat, glasses, slates","hat, slates, glasses","glasses, hat, slates","glasses, slates, hat"],["book.closed",".closed"],["book glasses","book.closed glasses",".closed glasses","glasses"],["shell+flippers","shell + flippers"],["book~glasses","book ~ glasses",".closed~glasses",".closed ~ glasses","book.closed~glasses","book.closed ~ glasses","glasses"]]},647:function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(996),r=i(s(815)),a=s(435),l=s(83),o=s(455),c=s(893);t.default=class{constructor(e,t){this.input=document.createElement("input"),this.enterBtn=document.createElement("div"),this.levels=e,this.emitter=r.default.getInstance(),this.res=!1,this.blanket=t,this.solved=0,this.hint=!1}draw(e,t){this.input.classList.add("input"),this.input.setAttribute("placeholder","Type in a CSS selector"),e.append(this.input),this.enterBtn.classList.add("btn"),e.append(this.enterBtn),(0,n.createElement)("span",["btnText"],this.enterBtn,"Enter"),this.input.addEventListener("keydown",(e=>{"Enter"===e.code&&this.resultAnnouncement(t)})),this.emitter.subscribe("levelNumberChanged",(()=>{this.cbCheckOfAnswer.bind(this),this.input.value=""})),this.emitter.subscribe("resetGame",this.resetProgress.bind(this)),this.emitter.subscribe("giveHint",this.outputHint.bind(this)),this.enterBtn.addEventListener("click",(()=>this.resultAnnouncement(t)))}cbCheckOfAnswer(e){e instanceof l.LevelNumberChanged&&(e.getNumber(),this.checkOfAnswer())}checkOfAnswer(){return 1===a.RightAnswersList[this.levels.activeLevel].filter((e=>e===this.input.value)).length&&(this.res=!0),this.res}resultAnnouncement(e){this.checkOfAnswer(),!0===this.res?(this.solved+=1,this.blanket.elementsDisappearance(),this.input.value="",0===this.levels.levelMarks[this.levels.activeLevel].childNodes.length&&!1===this.hint?this.levels.levelMarks[this.levels.activeLevel].append(this.levels.createCheckMark("#96d35f")):0===this.levels.levelMarks[this.levels.activeLevel].childNodes.length&&!0===this.hint&&(this.levels.levelMarks[this.levels.activeLevel].append(this.levels.createCheckMark("#ff0000")),this.hint=!1),setTimeout((()=>{this.blanket.blanket.innerHTML="",10===this.solved?(alert("Congrats! You made it till the very end!"),this.levels.activeLevel=0):this.levels.activeLevel<9?this.levels.activeLevel+=1:9===this.levels.activeLevel&&(this.levels.activeLevel=0);const e=new l.LevelNumberChanged(this.levels.activeLevel);this.emitter.emit(e)}),300),this.res=!1):(e.classList.add("wrongAnswer"),setTimeout((()=>e.classList.remove("wrongAnswer")),3e3))}resetProgress(e){if(e instanceof o.ResetGame){this.solved=0,this.levels.activeLevel=0;const e=new l.LevelNumberChanged(this.levels.activeLevel);this.emitter.emit(e)}}outputHint(e){if(e instanceof c.GiveHint){this.hint=!0;const e=a.RightAnswersList[this.levels.activeLevel][0].split("");let t=0;const s=()=>{this.input.value+=e[t],t<e.length-1?(t+=1,setTimeout((()=>s()),300)):this.input.setAttribute("value",this.input.value)};setTimeout((()=>s()),300)}}}},167:function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.LevelsList=void 0;const n=i(s(555)),r=i(s(654)),a=i(s(606)),l=i(s(414)),o=i(s(342)),c=i(s(23)),d=i(s(745)),g=i(s(24)),h=i(s(368)),u=i(s(852)),m=i(s(110)),b=i(s(764)),p=i(s(101)),f=i(s(410)),v=i(s(493)),E=i(s(449)),w=i(s(346)),k=[[{selector:"div",img:n.default,nesting:0,class:"blanket",child:[{selector:"slates",img:r.default,nesting:1,target:!0},{selector:"slates",img:r.default,nesting:1,target:!0}]}],[{selector:"div",img:n.default,nesting:0,class:"blanket",child:[{selector:"slates",img:r.default,nesting:1},{selector:"ring",img:a.default,nesting:1},{selector:"ring",img:l.default,nesting:1,id:"ropes",target:!0}]}],[{selector:"div",img:n.default,nesting:0,class:"blanket",child:[{selector:"glasses",img:g.default,nesting:1},{selector:"glasses",img:h.default,nesting:1,class:"hearts",target:!0},{selector:"book",img:u.default,nesting:1,child:[{selector:"glasses",img:h.default,nesting:2,class:"hearts",target:!0}]},{selector:"book",img:u.default,nesting:1}]}],[{selector:"div",img:n.default,nesting:0,class:"blanket",child:[{selector:"slates",img:r.default,nesting:1,target:!0},{selector:"hat",img:m.default,nesting:1,target:!0},{selector:"mask",img:b.default,nesting:1,target:!0}]}],[{selector:"div",img:n.default,nesting:0,class:"blanket",child:[{selector:"plate",img:o.default,nesting:1,child:[{selector:"watermelon",img:p.default,nesting:2,class:"fruit"}]},{selector:"plate",img:o.default,nesting:1,child:[{selector:"strawberry",img:c.default,nesting:2,class:"fruit",attribute:"butBerry",target:!0}]},{selector:"plate",img:o.default,nesting:1,child:[{selector:"avocado",img:f.default,nesting:2,class:"fruit"}]}]}],[{selector:"div",img:n.default,nesting:0,class:"blanket",child:[{selector:"slates",img:r.default,nesting:1,target:!0},{selector:"mask",img:b.default,nesting:1},{selector:"hat",img:m.default,nesting:1,target:!0},{selector:"glasses",img:g.default,nesting:1,target:!0}]}],[{selector:"div",img:n.default,nesting:0,class:"blanket",child:[{selector:"book",img:u.default,nesting:1},{selector:"book",img:v.default,nesting:1,class:"closed",target:!0},{selector:"book",img:u.default,nesting:1},{selector:"book",img:v.default,nesting:1,class:"closed",target:!0}]}],[{selector:"div",img:n.default,nesting:0,class:"blanket",child:[{selector:"book",img:v.default,nesting:1,class:"closed",child:[{selector:"glasses",img:h.default,nesting:2,class:"hearts",target:!0}]},{selector:"book",img:u.default,nesting:1},{selector:"book",img:v.default,nesting:1,class:"closed",child:[{selector:"glasses",img:g.default,nesting:2,target:!0}]}]}],[{selector:"div",img:n.default,nesting:0,class:"blanket",child:[{selector:"shell",img:E.default,nesting:1},{selector:"flippers",img:w.default,nesting:1,target:!0},{selector:"flippers",img:w.default,nesting:1},{selector:"ring",img:a.default,nesting:1}]}],[{selector:"div",img:n.default,nesting:0,class:"blanket",child:[{selector:"book",img:v.default,nesting:1,class:"closed"},{selector:"glasses",img:g.default,nesting:1,target:!0},{selector:"glasses",img:g.default,nesting:1,target:!0},{selector:"star",img:d.default,nesting:1},{selector:"glasses",img:g.default,nesting:1,target:!0}]}]];t.LevelsList=k},106:function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(996),r=s(945),a=i(s(815)),l=s(455),o=s(83),c=s(893);t.default=class{constructor(){this.levelsBlock=document.createElement("div"),this.levelItems=[],this.levelMarks=[],this.markClassName="mark",this.levelFromStorage=Number(localStorage.getItem("coracaoLevel")),this.emitter=a.default.getInstance(),this.resetBtn=document.createElement("div"),this.helpBtn=document.createElement("div"),null===this.levelFromStorage||void 0===this.levelFromStorage?this.activeLevel=0:this.activeLevel=this.levelFromStorage}subscribeToLevelChangedEvent(e){e instanceof o.LevelNumberChanged&&this.changeLevel(e)}restoreLocalStorage(){this.levelFromStorage>0&&this.levelFromStorage<11&&(this.activeLevel=this.levelFromStorage)}addListenersAndEmitter(){this.helpBtn.addEventListener("click",(()=>{const e=new c.GiveHint;this.emitter.emit(e)})),this.addListenerOnLevelsList(),this.emitter.subscribe("levelNumberChanged",(e=>{this.subscribeToLevelChangedEvent(e),this.setLocalStorage.bind(this)}))}drawLevelsBlock(e){(0,n.createElement)("h1",["levelHeader","levelBlockHeader"],e,"Levels:");const t=(0,n.createElement)("div",["burgerIconClose"],e);(0,n.createElement)("div",["burgerIconCloseLine","firstLine"],t),(0,n.createElement)("div",["burgerIconCloseLine","secondLine"],t),this.restoreLocalStorage();for(let e=0;e<10;e+=1){const t=(0,n.createElement)("div",["levelItemBlock"],this.levelsBlock);this.levelItems.push(t);const s=(0,n.createElement)("div",["levelMark",`level_${e+1}`],t);this.levelMarks.push(s),(0,n.createElement)("span",["listItem"],t,`${e+1}.  ${r.LevelNames[e+1]}`),e===this.activeLevel&&t.classList.add("activeListItem")}this.levelsBlock.classList.add("levelsList"),e.append(this.levelsBlock),this.resetBtn.classList.add("btn","btnLevelsBlock"),e.append(this.resetBtn),(0,n.createElement)("span",["btnText"],this.resetBtn,"Reset"),this.resetBtn.addEventListener("click",(()=>{this.levelMarks.forEach((e=>{for(;e.firstChild;)e.removeChild(e.firstChild)})),this.emitter.emit(new l.ResetGame)})),this.helpBtn.classList.add("btn","btnLevelsBlock"),e.append(this.helpBtn),(0,n.createElement)("span",["btnText"],this.helpBtn,"Help"),this.addListenersAndEmitter()}addListenerOnLevelsList(){this.levelItems.forEach(((e,t)=>{e.addEventListener("click",(()=>{this.levelItems.forEach((e=>e.classList.remove("activeListItem"))),e.classList.add("activeListItem"),this.activeLevel=t,this.setLocalStorage();const s=new o.LevelNumberChanged(this.activeLevel);this.emitter.unsubscribeForEvent("highlightElement"),this.emitter.unsubscribeForEvent("removeHighlightElement"),this.emitter.unsubscribeForEvent("highlightBlanketElement"),this.emitter.unsubscribeForEvent("removeHighlightBlanketElement"),this.emitter.emit(s)}))}))}changeLevel(e){this.levelItems.map((e=>e.classList.remove("activeListItem"))),this.levelItems[e.getNumber()].classList.add("activeListItem")}setLocalStorage(){localStorage.setItem("coracaoLevel",this.activeLevel.toString(10))}createCheckMark(e){const t=document.createElementNS("http://www.w3.org/2000/svg","svg");t.setAttribute("viewBox","0 0 1920 1920"),t.setAttribute("fill",e),t.classList.add(this.markClassName);const s=document.createElementNS("http://www.w3.org/2000/svg","g");s.setAttribute("id","SVGRepo_bgCarrier"),s.setAttribute("stroke-width","0");const i=document.createElementNS("http://www.w3.org/2000/svg","g");i.setAttribute("id","SVGRepo_bgCarrier");const n=document.createElementNS("http://www.w3.org/2000/svg","path");return n.setAttribute("d","M1743.858 267.012 710.747 1300.124 176.005 765.382 0 941.387l710.747 710.871 1209.24-1209.116z"),n.setAttribute("fill-rule","evenodd"),i.append(n),t.append(s),t.append(i),t}}},996:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createElement=void 0,t.createElement=(e,t,s,i)=>{const n=document.createElement(e);return n.classList.add(...t),i&&(n.textContent=i),s.append(n),n}},303:function(e,t,s){"use strict";var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),(new(i(s(956)).default)).start()},893:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GiveHint=void 0,t.GiveHint=class{constructor(){this.hint=!0}getHintStatus(){return this.hint}}},921:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HighlightBlanketElement=void 0,t.HighlightBlanketElement=class{constructor(e){this.elementIdent=e}getElementIdent(){return this.elementIdent}}},269:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HighlightElement=void 0,t.HighlightElement=class{constructor(e){this.elementIdent=e}getElementIdent(){return this.elementIdent}}},83:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LevelNumberChanged=void 0,t.LevelNumberChanged=class{constructor(e){this.newNumber=e}getNumber(){return this.newNumber}}},817:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RemoveHighlightBlanketElement=void 0,t.RemoveHighlightBlanketElement=class{constructor(e){this.elementIdent=e}getElementIdent(){return this.elementIdent}}},700:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RemoveHighlightElement=void 0,t.RemoveHighlightElement=class{constructor(e){this.elementIdent=e}getElementIdent(){return this.elementIdent}}},455:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ResetGame=void 0,t.ResetGame=class{constructor(){this.newCurrentLevel=0,this.solvedLevels=0}getLevelNumber(){return this.newCurrentLevel}getSolvedLevelsNum(){return this.solvedLevels}}},945:(e,t)=>{"use strict";var s;Object.defineProperty(t,"__esModule",{value:!0}),t.LevelNames=void 0,function(e){e[e["Tag name selector"]=1]="Tag name selector",e[e["Id selector (#id)"]=2]="Id selector (#id)",e[e["Class selector (.class)"]=3]="Class selector (.class)",e[e["Universal selector (*)"]=4]="Universal selector (*)",e[e["Selector by attribute"]=5]="Selector by attribute",e[e["Selectors group by comma"]=6]="Selectors group by comma",e[e["Element with class"]=7]="Element with class",e[e["Nesting with space"]=8]="Nesting with space",e[e["First adjacent element (+)"]=9]="First adjacent element (+)",e[e["Any adjacent element (~)"]=10]="Any adjacent element (~)"}(s||(t.LevelNames=s={}))},686:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.rsData=t.ghData=t.twitterData=t.fbData=t.mailData=void 0,t.mailData={gQuantity:1,color:"#d2922c",viewBox:"0 0 64 64",path:"M32,34.934L63.617,10.34C62.984,8.965,61.613,8,60,8H4c-1.613,0-2.984,0.965-3.617,2.34L32,34.934z",pathSecond:"M34.457,43.156C33.734,43.719,32.867,44,32,44s-1.734-0.281-2.457-0.844L0,20.18V52c0,2.211,1.789,4,4,4h56c2.211,0,4-1.789,4-4V20.18L34.457,43.156z"},t.fbData={gQuantity:0,color:"#d2922c",viewBox:"0 0 24 24",path:"M20.9,2H3.1A1.1,1.1,0,0,0,2,3.1V20.9A1.1,1.1,0,0,0,3.1,22h9.58V14.25h-2.6v-3h2.6V9a3.64,3.64,0,0,1,3.88-4,20.26,20.26,0,0,1,2.33.12v2.7H17.3c-1.26,0-1.5.6-1.5,1.47v1.93h3l-.39,3H15.8V22h5.1A1.1,1.1,0,0,0,22,20.9V3.1A1.1,1.1,0,0,0,20.9,2Z"},t.twitterData={gQuantity:2,color:"#d2922c",viewBox:"0 -2 20 20",path:"M10.29,7377 C17.837,7377 21.965,7370.84365 21.965,7365.50546 C21.965,7365.33021 21.965,7365.15595 21.953,7364.98267 C22.756,7364.41163 23.449,7363.70276 24,7362.8915 C23.252,7363.21837 22.457,7363.433 21.644,7363.52751 C22.5,7363.02244 23.141,7362.2289 23.448,7361.2926 C22.642,7361.76321 21.761,7362.095 20.842,7362.27321 C19.288,7360.64674 16.689,7360.56798 15.036,7362.09796 C13.971,7363.08447 13.518,7364.55538 13.849,7365.95835 C10.55,7365.79492 7.476,7364.261 5.392,7361.73762 C4.303,7363.58363 4.86,7365.94457 6.663,7367.12996 C6.01,7367.11125 5.371,7366.93797 4.8,7366.62489 L4.8,7366.67608 C4.801,7368.5989 6.178,7370.2549 8.092,7370.63591 C7.488,7370.79836 6.854,7370.82199 6.24,7370.70483 C6.777,7372.35099 8.318,7373.47829 10.073,7373.51078 C8.62,7374.63513 6.825,7375.24554 4.977,7375.24358 C4.651,7375.24259 4.325,7375.22388 4,7375.18549 C5.877,7376.37088 8.06,7377 10.29,7376.99705"},t.ghData={gQuantity:0,color:"#d2922c",viewBox:"-2 -2 24 24",path:"M18.88 1.099C18.147.366 17.265 0 16.233 0H3.746C2.714 0 1.832.366 1.099 1.099.366 1.832 0 2.714 0 3.746v12.487c0 1.032.366 1.914 1.099 2.647.733.733 1.615 1.099 2.647 1.099H6.66c.19 0 .333-.007.429-.02a.504.504 0 0 0 .286-.169c.095-.1.143-.245.143-.435l-.007-.885c-.004-.564-.006-1.01-.006-1.34l-.3.052c-.19.035-.43.05-.721.046a5.555 5.555 0 0 1-.904-.091 2.026 2.026 0 0 1-.872-.39 1.651 1.651 0 0 1-.572-.8l-.13-.3a3.25 3.25 0 0 0-.41-.663c-.186-.243-.375-.407-.566-.494l-.09-.065a.956.956 0 0 1-.17-.156.723.723 0 0 1-.117-.182c-.026-.061-.004-.111.065-.15.07-.04.195-.059.378-.059l.26.04c.173.034.388.138.643.311a2.1 2.1 0 0 1 .631.677c.2.355.44.626.722.813.282.186.566.28.852.28.286 0 .533-.022.742-.065a2.59 2.59 0 0 0 .585-.196c.078-.58.29-1.028.637-1.34a8.907 8.907 0 0 1-1.333-.234 5.314 5.314 0 0 1-1.223-.507 3.5 3.5 0 0 1-1.047-.872c-.277-.347-.505-.802-.683-1.365-.177-.564-.266-1.215-.266-1.952 0-1.049.342-1.942 1.027-2.68-.32-.788-.29-1.673.091-2.652.252-.079.625-.02 1.119.175.494.195.856.362 1.086.5.23.14.414.257.553.352a9.233 9.233 0 0 1 2.497-.338c.859 0 1.691.113 2.498.338l.494-.312a6.997 6.997 0 0 1 1.197-.572c.46-.174.81-.221 1.054-.143.39.98.424 1.864.103 2.653.685.737 1.028 1.63 1.028 2.68 0 .737-.089 1.39-.267 1.957-.177.568-.407 1.023-.689 1.366-.282.343-.633.63-1.053.865-.42.234-.828.403-1.223.507a8.9 8.9 0 0 1-1.333.235c.45.39.676 1.005.676 1.846v3.11c0 .147.021.266.065.357a.36.36 0 0 0 .208.189c.096.034.18.056.254.064.074.01.18.013.318.013h2.914c1.032 0 1.914-.366 2.647-1.099.732-.732 1.099-1.615 1.099-2.647V3.746c0-1.032-.367-1.914-1.1-2.647z"},t.rsData={gQuantity:0,color:"#d2922c",viewBox:"0 0 552.85 198.67",path:"M275.36 61.37l26.29-1.65q.86 6.41 3.48 9.76 4.28 5.43 12.2 5.43 5.91 0 9.12-2.77a8.34 8.34 0 0 0 3.2-6.44 8.18 8.18 0 0 0-3-6.22q-3-2.74-14.15-5.19-18.18-4.08-25.93-10.86a21.84 21.84 0 0 1-7.81-17.26 23.44 23.44 0 0 1 4-13 26.47 26.47 0 0 1 12-9.64q8-3.51 22-3.51 17.14 0 26.14 6.38t10.71 20.28l-26.05 1.52q-1-6-4.36-8.78t-9.2-2.77c-3.21 0-5.63.69-7.25 2.05a6.25 6.25 0 0 0-2.44 5 5 5 0 0 0 2 3.84q1.95 1.77 9.27 3.3 18.12 3.9 26 7.9t11.4 9.91a25.12 25.12 0 0 1 3.57 13.24 28.37 28.37 0 0 1-4.75 15.86 29.83 29.83 0 0 1-13.3 11q-8.55 3.75-21.54 3.75-22.81 0-31.6-8.78t-10-22.35zM6.27 91V1.53h46.06q12.81 0 19.58 2.19a20.93 20.93 0 0 1 10.92 8.14A24.75 24.75 0 0 1 87 26.35a24.8 24.8 0 0 1-3.2 12.84A24.91 24.91 0 0 1 75.07 48a33.63 33.63 0 0 1-9.7 3.54 27.79 27.79 0 0 1 7.19 3.29A27.79 27.79 0 0 1 77 59.49 35.16 35.16 0 0 1 80.85 65l13.38 26H63L48.24 63.63q-2.81-5.31-5-6.9a11.63 11.63 0 0 0-6.78-2.07H34V91zM34 37.76h11.68A41 41 0 0 0 53 36.54a7.3 7.3 0 0 0 4.48-2.81 8.24 8.24 0 0 0 1.74-5.18 8.23 8.23 0 0 0-2.75-6.65q-2.74-2.32-10.31-2.32H34zM0 167.56l26.29-1.64q.86 6.41 3.48 9.76Q34 181.11 42 181.11q5.91 0 9.12-2.78a8.34 8.34 0 0 0 3.2-6.44 8.2 8.2 0 0 0-3-6.22q-3-2.74-14.15-5.18-18.18-4.1-25.93-10.86a21.87 21.87 0 0 1-7.81-17.27 23.49 23.49 0 0 1 4-13 26.47 26.47 0 0 1 12-9.64q8-3.51 22-3.51 17.14 0 26.14 6.38t10.71 20.28l-26 1.53q-1-6-4.36-8.79t-9.19-2.74q-4.81 0-7.25 2a6.25 6.25 0 0 0-2.44 5 5 5 0 0 0 2 3.85q1.95 1.77 9.27 3.29 18.12 3.9 26 7.9t11.4 9.91a25.15 25.15 0 0 1 3.57 13.24 28.35 28.35 0 0 1-4.75 15.86 29.83 29.83 0 0 1-13.3 11q-8.55 3.75-21.54 3.75-22.81 0-31.6-8.78T0 167.56zm163-7.01l24.22 7.32a44.72 44.72 0 0 1-7.69 17 33.46 33.46 0 0 1-13 10.31q-7.78 3.47-19.8 3.47-14.58 0-23.82-4.23t-16-14.91q-6.72-10.67-6.71-27.31 0-22.18 11.8-34.11t33.4-11.92q16.91 0 26.57 6.84t14.36 21l-24.4 5.43a21 21 0 0 0-2.68-6 16 16 0 0 0-5.67-4.88 16.31 16.31 0 0 0-7.51-1.71q-9.39 0-14.39 7.56-3.8 5.61-3.79 17.61 0 14.86 4.52 20.38t12.69 5.51q7.92 0 12-4.45t5.9-12.91zm45.51-52.83h27.63V139h30.2v-31.28h27.75v89.43h-27.75V161h-30.2v36.18h-27.63zm102.78 44.77q0-21.88 12.2-34.1t34-12.2q22.32 0 34.4 12T404 151.76q0 15.69-5.28 25.72a37.54 37.54 0 0 1-15.25 15.61q-10 5.58-24.86 5.58-15.12 0-25-4.82a37.59 37.59 0 0 1-16.07-15.25q-6.26-10.42-6.25-26.11zm27.63.13q0 13.55 5 19.46t13.7 5.91q8.91 0 13.79-5.79t4.88-20.8q0-12.63-5.1-18.46t-13.82-5.82A16.78 16.78 0 0 0 344 133q-5.07 6-5.08 19.62z",pathSecond:"M392.28 152.49q0-21.88 12.2-34.1t34-12.2q22.34 0 34.41 12t12.07 33.58q0 15.69-5.27 25.72a37.6 37.6 0 0 1-15.25 15.61q-10 5.58-24.86 5.58-15.13 0-25-4.82a37.67 37.67 0 0 1-16.08-15.25q-6.22-10.43-6.22-26.12zm27.64.13q0 13.55 5 19.46t13.72 5.92q8.91 0 13.79-5.79t4.88-20.8q0-12.63-5.09-18.46t-13.82-5.82A16.77 16.77 0 0 0 425 133q-5.09 6-5.08 19.62z",pathThird:"M482.08 107.72h27.64v67.41h43.13v22h-70.77z"}},410:(e,t,s)=>{"use strict";e.exports=s.p+"assets/img/avocado.5bccd08a.svg"},555:(e,t,s)=>{"use strict";e.exports=s.p+"assets/img/blanket.e5524cbf.svg"},852:(e,t,s)=>{"use strict";e.exports=s.p+"assets/img/book.288da2a7.svg"},493:(e,t,s)=>{"use strict";e.exports=s.p+"assets/img/book_closed.e01ffbe8.svg"},346:(e,t,s)=>{"use strict";e.exports=s.p+"assets/img/flippers.a57c46e9.svg"},24:(e,t,s)=>{"use strict";e.exports=s.p+"assets/img/glasses.b600a105.svg"},368:(e,t,s)=>{"use strict";e.exports=s.p+"assets/img/glasses_hearts.aa3ea42a.svg"},110:(e,t,s)=>{"use strict";e.exports=s.p+"assets/img/hat.36917033.svg"},764:(e,t,s)=>{"use strict";e.exports=s.p+"assets/img/mask.992e2f76.svg"},342:(e,t,s)=>{"use strict";e.exports=s.p+"assets/img/plate.12af1436.svg"},606:(e,t,s)=>{"use strict";e.exports=s.p+"assets/img/ring.e3144c2c.svg"},414:(e,t,s)=>{"use strict";e.exports=s.p+"assets/img/ring_ropes.08500f3c.svg"},449:(e,t,s)=>{"use strict";e.exports=s.p+"assets/img/shell.9a341bf2.svg"},654:(e,t,s)=>{"use strict";e.exports=s.p+"assets/img/slates.8f6f4fb5.svg"},745:(e,t,s)=>{"use strict";e.exports=s.p+"assets/img/star.0a5cb872.svg"},23:(e,t,s)=>{"use strict";e.exports=s.p+"assets/img/strawberry.6c7f4ad9.svg"},101:(e,t,s)=>{"use strict";e.exports=s.p+"assets/img/watermelon.a47836e5.svg"},84:e=>{function t(e){return e instanceof Map?e.clear=e.delete=e.set=function(){throw new Error("map is read-only")}:e instanceof Set&&(e.add=e.clear=e.delete=function(){throw new Error("set is read-only")}),Object.freeze(e),Object.getOwnPropertyNames(e).forEach((s=>{const i=e[s],n=typeof i;"object"!==n&&"function"!==n||Object.isFrozen(i)||t(i)})),e}class s{constructor(e){void 0===e.data&&(e.data={}),this.data=e.data,this.isMatchIgnored=!1}ignoreMatch(){this.isMatchIgnored=!0}}function i(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")}function n(e,...t){const s=Object.create(null);for(const t in e)s[t]=e[t];return t.forEach((function(e){for(const t in e)s[t]=e[t]})),s}const r=e=>!!e.scope;class a{constructor(e,t){this.buffer="",this.classPrefix=t.classPrefix,e.walk(this)}addText(e){this.buffer+=i(e)}openNode(e){if(!r(e))return;const t=((e,{prefix:t})=>{if(e.startsWith("language:"))return e.replace("language:","language-");if(e.includes(".")){const s=e.split(".");return[`${t}${s.shift()}`,...s.map(((e,t)=>`${e}${"_".repeat(t+1)}`))].join(" ")}return`${t}${e}`})(e.scope,{prefix:this.classPrefix});this.span(t)}closeNode(e){r(e)&&(this.buffer+="</span>")}value(){return this.buffer}span(e){this.buffer+=`<span class="${e}">`}}const l=(e={})=>{const t={children:[]};return Object.assign(t,e),t};class o{constructor(){this.rootNode=l(),this.stack=[this.rootNode]}get top(){return this.stack[this.stack.length-1]}get root(){return this.rootNode}add(e){this.top.children.push(e)}openNode(e){const t=l({scope:e});this.add(t),this.stack.push(t)}closeNode(){if(this.stack.length>1)return this.stack.pop()}closeAllNodes(){for(;this.closeNode(););}toJSON(){return JSON.stringify(this.rootNode,null,4)}walk(e){return this.constructor._walk(e,this.rootNode)}static _walk(e,t){return"string"==typeof t?e.addText(t):t.children&&(e.openNode(t),t.children.forEach((t=>this._walk(e,t))),e.closeNode(t)),e}static _collapse(e){"string"!=typeof e&&e.children&&(e.children.every((e=>"string"==typeof e))?e.children=[e.children.join("")]:e.children.forEach((e=>{o._collapse(e)})))}}class c extends o{constructor(e){super(),this.options=e}addText(e){""!==e&&this.add(e)}startScope(e){this.openNode(e)}endScope(){this.closeNode()}__addSublanguage(e,t){const s=e.root;t&&(s.scope=`language:${t}`),this.add(s)}toHTML(){return new a(this,this.options).value()}finalize(){return this.closeAllNodes(),!0}}function d(e){return e?"string"==typeof e?e:e.source:null}function g(e){return m("(?=",e,")")}function h(e){return m("(?:",e,")*")}function u(e){return m("(?:",e,")?")}function m(...e){return e.map((e=>d(e))).join("")}function b(...e){const t=function(e){const t=e[e.length-1];return"object"==typeof t&&t.constructor===Object?(e.splice(e.length-1,1),t):{}}(e);return"("+(t.capture?"":"?:")+e.map((e=>d(e))).join("|")+")"}function p(e){return new RegExp(e.toString()+"|").exec("").length-1}const f=/\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;function v(e,{joinWith:t}){let s=0;return e.map((e=>{s+=1;const t=s;let i=d(e),n="";for(;i.length>0;){const e=f.exec(i);if(!e){n+=i;break}n+=i.substring(0,e.index),i=i.substring(e.index+e[0].length),"\\"===e[0][0]&&e[1]?n+="\\"+String(Number(e[1])+t):(n+=e[0],"("===e[0]&&s++)}return n})).map((e=>`(${e})`)).join(t)}const E="[a-zA-Z]\\w*",w="[a-zA-Z_]\\w*",k="\\b\\d+(\\.\\d+)?",L="(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",y="\\b(0b[01]+)",_={begin:"\\\\[\\s\\S]",relevance:0},x={scope:"string",begin:"'",end:"'",illegal:"\\n",contains:[_]},S={scope:"string",begin:'"',end:'"',illegal:"\\n",contains:[_]},M=function(e,t,s={}){const i=n({scope:"comment",begin:e,end:t,contains:[]},s);i.contains.push({scope:"doctag",begin:"[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",end:/(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,excludeBegin:!0,relevance:0});const r=b("I","a","is","so","us","to","at","if","in","it","on",/[A-Za-z]+['](d|ve|re|ll|t|s|n)/,/[A-Za-z]+[-][a-z]+/,/[A-Za-z][a-z]{2,}/);return i.contains.push({begin:m(/[ ]+/,"(",r,/[.]?[:]?([.][ ]|[ ])/,"){3}")}),i},A=M("//","$"),N=M("/\\*","\\*/"),C=M("#","$"),T={scope:"number",begin:k,relevance:0},O={scope:"number",begin:L,relevance:0},I={scope:"number",begin:y,relevance:0},B={begin:/(?=\/[^/\n]*\/)/,contains:[{scope:"regexp",begin:/\//,end:/\/[gimuy]*/,illegal:/\n/,contains:[_,{begin:/\[/,end:/\]/,relevance:0,contains:[_]}]}]},H={scope:"title",begin:E,relevance:0},R={scope:"title",begin:w,relevance:0},j={begin:"\\.\\s*"+w,relevance:0};var D=Object.freeze({__proto__:null,MATCH_NOTHING_RE:/\b\B/,IDENT_RE:E,UNDERSCORE_IDENT_RE:w,NUMBER_RE:k,C_NUMBER_RE:L,BINARY_NUMBER_RE:y,RE_STARTERS_RE:"!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",SHEBANG:(e={})=>{const t=/^#![ ]*\//;return e.binary&&(e.begin=m(t,/.*\b/,e.binary,/\b.*/)),n({scope:"meta",begin:t,end:/$/,relevance:0,"on:begin":(e,t)=>{0!==e.index&&t.ignoreMatch()}},e)},BACKSLASH_ESCAPE:_,APOS_STRING_MODE:x,QUOTE_STRING_MODE:S,PHRASAL_WORDS_MODE:{begin:/\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/},COMMENT:M,C_LINE_COMMENT_MODE:A,C_BLOCK_COMMENT_MODE:N,HASH_COMMENT_MODE:C,NUMBER_MODE:T,C_NUMBER_MODE:O,BINARY_NUMBER_MODE:I,REGEXP_MODE:B,TITLE_MODE:H,UNDERSCORE_TITLE_MODE:R,METHOD_GUARD:j,END_SAME_AS_BEGIN:function(e){return Object.assign(e,{"on:begin":(e,t)=>{t.data._beginMatch=e[1]},"on:end":(e,t)=>{t.data._beginMatch!==e[1]&&t.ignoreMatch()}})}});function $(e,t){"."===e.input[e.index-1]&&t.ignoreMatch()}function P(e,t){void 0!==e.className&&(e.scope=e.className,delete e.className)}function z(e,t){t&&e.beginKeywords&&(e.begin="\\b("+e.beginKeywords.split(" ").join("|")+")(?!\\.)(?=\\b|\\s)",e.__beforeBegin=$,e.keywords=e.keywords||e.beginKeywords,delete e.beginKeywords,void 0===e.relevance&&(e.relevance=0))}function q(e,t){Array.isArray(e.illegal)&&(e.illegal=b(...e.illegal))}function F(e,t){if(e.match){if(e.begin||e.end)throw new Error("begin & end are not supported with match");e.begin=e.match,delete e.match}}function U(e,t){void 0===e.relevance&&(e.relevance=1)}const V=(e,t)=>{if(!e.beforeMatch)return;if(e.starts)throw new Error("beforeMatch cannot be used with starts");const s=Object.assign({},e);Object.keys(e).forEach((t=>{delete e[t]})),e.keywords=s.keywords,e.begin=m(s.beforeMatch,g(s.begin)),e.starts={relevance:0,contains:[Object.assign(s,{endsParent:!0})]},e.relevance=0,delete s.beforeMatch},G=["of","and","for","in","not","or","if","then","parent","list","value"],W="keyword";function Q(e,t,s=W){const i=Object.create(null);return"string"==typeof e?n(s,e.split(" ")):Array.isArray(e)?n(s,e):Object.keys(e).forEach((function(s){Object.assign(i,Q(e[s],t,s))})),i;function n(e,s){t&&(s=s.map((e=>e.toLowerCase()))),s.forEach((function(t){const s=t.split("|");i[s[0]]=[e,X(s[0],s[1])]}))}}function X(e,t){return t?Number(t):function(e){return G.includes(e.toLowerCase())}(e)?0:1}const Z={},K=e=>{console.error(e)},J=(e,...t)=>{console.log(`WARN: ${e}`,...t)},Y=(e,t)=>{Z[`${e}/${t}`]||(console.log(`Deprecated as of ${e}. ${t}`),Z[`${e}/${t}`]=!0)},ee=new Error;function te(e,t,{key:s}){let i=0;const n=e[s],r={},a={};for(let e=1;e<=t.length;e++)a[e+i]=n[e],r[e+i]=!0,i+=p(t[e-1]);e[s]=a,e[s]._emit=r,e[s]._multi=!0}function se(e){!function(e){e.scope&&"object"==typeof e.scope&&null!==e.scope&&(e.beginScope=e.scope,delete e.scope)}(e),"string"==typeof e.beginScope&&(e.beginScope={_wrap:e.beginScope}),"string"==typeof e.endScope&&(e.endScope={_wrap:e.endScope}),function(e){if(Array.isArray(e.begin)){if(e.skip||e.excludeBegin||e.returnBegin)throw K("skip, excludeBegin, returnBegin not compatible with beginScope: {}"),ee;if("object"!=typeof e.beginScope||null===e.beginScope)throw K("beginScope must be object"),ee;te(e,e.begin,{key:"beginScope"}),e.begin=v(e.begin,{joinWith:""})}}(e),function(e){if(Array.isArray(e.end)){if(e.skip||e.excludeEnd||e.returnEnd)throw K("skip, excludeEnd, returnEnd not compatible with endScope: {}"),ee;if("object"!=typeof e.endScope||null===e.endScope)throw K("endScope must be object"),ee;te(e,e.end,{key:"endScope"}),e.end=v(e.end,{joinWith:""})}}(e)}function ie(e){function t(t,s){return new RegExp(d(t),"m"+(e.case_insensitive?"i":"")+(e.unicodeRegex?"u":"")+(s?"g":""))}class s{constructor(){this.matchIndexes={},this.regexes=[],this.matchAt=1,this.position=0}addRule(e,t){t.position=this.position++,this.matchIndexes[this.matchAt]=t,this.regexes.push([t,e]),this.matchAt+=p(e)+1}compile(){0===this.regexes.length&&(this.exec=()=>null);const e=this.regexes.map((e=>e[1]));this.matcherRe=t(v(e,{joinWith:"|"}),!0),this.lastIndex=0}exec(e){this.matcherRe.lastIndex=this.lastIndex;const t=this.matcherRe.exec(e);if(!t)return null;const s=t.findIndex(((e,t)=>t>0&&void 0!==e)),i=this.matchIndexes[s];return t.splice(0,s),Object.assign(t,i)}}class i{constructor(){this.rules=[],this.multiRegexes=[],this.count=0,this.lastIndex=0,this.regexIndex=0}getMatcher(e){if(this.multiRegexes[e])return this.multiRegexes[e];const t=new s;return this.rules.slice(e).forEach((([e,s])=>t.addRule(e,s))),t.compile(),this.multiRegexes[e]=t,t}resumingScanAtSamePosition(){return 0!==this.regexIndex}considerAll(){this.regexIndex=0}addRule(e,t){this.rules.push([e,t]),"begin"===t.type&&this.count++}exec(e){const t=this.getMatcher(this.regexIndex);t.lastIndex=this.lastIndex;let s=t.exec(e);if(this.resumingScanAtSamePosition())if(s&&s.index===this.lastIndex);else{const t=this.getMatcher(0);t.lastIndex=this.lastIndex+1,s=t.exec(e)}return s&&(this.regexIndex+=s.position+1,this.regexIndex===this.count&&this.considerAll()),s}}if(e.compilerExtensions||(e.compilerExtensions=[]),e.contains&&e.contains.includes("self"))throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");return e.classNameAliases=n(e.classNameAliases||{}),function s(r,a){const l=r;if(r.isCompiled)return l;[P,F,se,V].forEach((e=>e(r,a))),e.compilerExtensions.forEach((e=>e(r,a))),r.__beforeBegin=null,[z,q,U].forEach((e=>e(r,a))),r.isCompiled=!0;let o=null;return"object"==typeof r.keywords&&r.keywords.$pattern&&(r.keywords=Object.assign({},r.keywords),o=r.keywords.$pattern,delete r.keywords.$pattern),o=o||/\w+/,r.keywords&&(r.keywords=Q(r.keywords,e.case_insensitive)),l.keywordPatternRe=t(o,!0),a&&(r.begin||(r.begin=/\B|\b/),l.beginRe=t(l.begin),r.end||r.endsWithParent||(r.end=/\B|\b/),r.end&&(l.endRe=t(l.end)),l.terminatorEnd=d(l.end)||"",r.endsWithParent&&a.terminatorEnd&&(l.terminatorEnd+=(r.end?"|":"")+a.terminatorEnd)),r.illegal&&(l.illegalRe=t(r.illegal)),r.contains||(r.contains=[]),r.contains=[].concat(...r.contains.map((function(e){return function(e){return e.variants&&!e.cachedVariants&&(e.cachedVariants=e.variants.map((function(t){return n(e,{variants:null},t)}))),e.cachedVariants?e.cachedVariants:ne(e)?n(e,{starts:e.starts?n(e.starts):null}):Object.isFrozen(e)?n(e):e}("self"===e?r:e)}))),r.contains.forEach((function(e){s(e,l)})),r.starts&&s(r.starts,a),l.matcher=function(e){const t=new i;return e.contains.forEach((e=>t.addRule(e.begin,{rule:e,type:"begin"}))),e.terminatorEnd&&t.addRule(e.terminatorEnd,{type:"end"}),e.illegal&&t.addRule(e.illegal,{type:"illegal"}),t}(l),l}(e)}function ne(e){return!!e&&(e.endsWithParent||ne(e.starts))}class re extends Error{constructor(e,t){super(e),this.name="HTMLInjectionError",this.html=t}}const ae=i,le=n,oe=Symbol("nomatch"),ce=function(e){const i=Object.create(null),n=Object.create(null),r=[];let a=!0;const l="Could not find the language '{}', did you forget to load/include a language module?",o={disableAutodetect:!0,name:"Plain text",contains:[]};let d={ignoreUnescapedHTML:!1,throwUnescapedHTML:!1,noHighlightRe:/^(no-?highlight)$/i,languageDetectRe:/\blang(?:uage)?-([\w-]+)\b/i,classPrefix:"hljs-",cssSelector:"pre code",languages:null,__emitter:c};function p(e){return d.noHighlightRe.test(e)}function f(e,t,s){let i="",n="";"object"==typeof t?(i=e,s=t.ignoreIllegals,n=t.language):(Y("10.7.0","highlight(lang, code, ...args) has been deprecated."),Y("10.7.0","Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277"),n=e,i=t),void 0===s&&(s=!0);const r={code:i,language:n};S("before:highlight",r);const a=r.result?r.result:v(r.language,r.code,s);return a.code=r.code,S("after:highlight",a),a}function v(e,t,n,r){const o=Object.create(null);function c(){if(!S.keywords)return void A.addText(N);let e=0;S.keywordPatternRe.lastIndex=0;let t=S.keywordPatternRe.exec(N),s="";for(;t;){s+=N.substring(e,t.index);const n=L.case_insensitive?t[0].toLowerCase():t[0],r=(i=n,S.keywords[i]);if(r){const[e,i]=r;if(A.addText(s),s="",o[n]=(o[n]||0)+1,o[n]<=7&&(C+=i),e.startsWith("_"))s+=t[0];else{const s=L.classNameAliases[e]||e;h(t[0],s)}}else s+=t[0];e=S.keywordPatternRe.lastIndex,t=S.keywordPatternRe.exec(N)}var i;s+=N.substring(e),A.addText(s)}function g(){null!=S.subLanguage?function(){if(""===N)return;let e=null;if("string"==typeof S.subLanguage){if(!i[S.subLanguage])return void A.addText(N);e=v(S.subLanguage,N,!0,M[S.subLanguage]),M[S.subLanguage]=e._top}else e=E(N,S.subLanguage.length?S.subLanguage:null);S.relevance>0&&(C+=e.relevance),A.__addSublanguage(e._emitter,e.language)}():c(),N=""}function h(e,t){""!==e&&(A.startScope(t),A.addText(e),A.endScope())}function u(e,t){let s=1;const i=t.length-1;for(;s<=i;){if(!e._emit[s]){s++;continue}const i=L.classNameAliases[e[s]]||e[s],n=t[s];i?h(n,i):(N=n,c(),N=""),s++}}function m(e,t){return e.scope&&"string"==typeof e.scope&&A.openNode(L.classNameAliases[e.scope]||e.scope),e.beginScope&&(e.beginScope._wrap?(h(N,L.classNameAliases[e.beginScope._wrap]||e.beginScope._wrap),N=""):e.beginScope._multi&&(u(e.beginScope,t),N="")),S=Object.create(e,{parent:{value:S}}),S}function b(e,t,i){let n=function(e,t){const s=e&&e.exec(t);return s&&0===s.index}(e.endRe,i);if(n){if(e["on:end"]){const i=new s(e);e["on:end"](t,i),i.isMatchIgnored&&(n=!1)}if(n){for(;e.endsParent&&e.parent;)e=e.parent;return e}}if(e.endsWithParent)return b(e.parent,t,i)}function p(e){return 0===S.matcher.regexIndex?(N+=e[0],1):(I=!0,0)}function f(e){const s=e[0],i=t.substring(e.index),n=b(S,e,i);if(!n)return oe;const r=S;S.endScope&&S.endScope._wrap?(g(),h(s,S.endScope._wrap)):S.endScope&&S.endScope._multi?(g(),u(S.endScope,e)):r.skip?N+=s:(r.returnEnd||r.excludeEnd||(N+=s),g(),r.excludeEnd&&(N=s));do{S.scope&&A.closeNode(),S.skip||S.subLanguage||(C+=S.relevance),S=S.parent}while(S!==n.parent);return n.starts&&m(n.starts,e),r.returnEnd?0:s.length}let w={};function k(i,r){const l=r&&r[0];if(N+=i,null==l)return g(),0;if("begin"===w.type&&"end"===r.type&&w.index===r.index&&""===l){if(N+=t.slice(r.index,r.index+1),!a){const t=new Error(`0 width match regex (${e})`);throw t.languageName=e,t.badRule=w.rule,t}return 1}if(w=r,"begin"===r.type)return function(e){const t=e[0],i=e.rule,n=new s(i),r=[i.__beforeBegin,i["on:begin"]];for(const s of r)if(s&&(s(e,n),n.isMatchIgnored))return p(t);return i.skip?N+=t:(i.excludeBegin&&(N+=t),g(),i.returnBegin||i.excludeBegin||(N=t)),m(i,e),i.returnBegin?0:t.length}(r);if("illegal"===r.type&&!n){const e=new Error('Illegal lexeme "'+l+'" for mode "'+(S.scope||"<unnamed>")+'"');throw e.mode=S,e}if("end"===r.type){const e=f(r);if(e!==oe)return e}if("illegal"===r.type&&""===l)return 1;if(O>1e5&&O>3*r.index)throw new Error("potential infinite loop, way more iterations than matches");return N+=l,l.length}const L=y(e);if(!L)throw K(l.replace("{}",e)),new Error('Unknown language: "'+e+'"');const _=ie(L);let x="",S=r||_;const M={},A=new d.__emitter(d);!function(){const e=[];for(let t=S;t!==L;t=t.parent)t.scope&&e.unshift(t.scope);e.forEach((e=>A.openNode(e)))}();let N="",C=0,T=0,O=0,I=!1;try{if(L.__emitTokens)L.__emitTokens(t,A);else{for(S.matcher.considerAll();;){O++,I?I=!1:S.matcher.considerAll(),S.matcher.lastIndex=T;const e=S.matcher.exec(t);if(!e)break;const s=k(t.substring(T,e.index),e);T=e.index+s}k(t.substring(T))}return A.finalize(),x=A.toHTML(),{language:e,value:x,relevance:C,illegal:!1,_emitter:A,_top:S}}catch(s){if(s.message&&s.message.includes("Illegal"))return{language:e,value:ae(t),illegal:!0,relevance:0,_illegalBy:{message:s.message,index:T,context:t.slice(T-100,T+100),mode:s.mode,resultSoFar:x},_emitter:A};if(a)return{language:e,value:ae(t),illegal:!1,relevance:0,errorRaised:s,_emitter:A,_top:S};throw s}}function E(e,t){t=t||d.languages||Object.keys(i);const s=function(e){const t={value:ae(e),illegal:!1,relevance:0,_top:o,_emitter:new d.__emitter(d)};return t._emitter.addText(e),t}(e),n=t.filter(y).filter(x).map((t=>v(t,e,!1)));n.unshift(s);const r=n.sort(((e,t)=>{if(e.relevance!==t.relevance)return t.relevance-e.relevance;if(e.language&&t.language){if(y(e.language).supersetOf===t.language)return 1;if(y(t.language).supersetOf===e.language)return-1}return 0})),[a,l]=r,c=a;return c.secondBest=l,c}function w(e){let t=null;const s=function(e){let t=e.className+" ";t+=e.parentNode?e.parentNode.className:"";const s=d.languageDetectRe.exec(t);if(s){const t=y(s[1]);return t||(J(l.replace("{}",s[1])),J("Falling back to no-highlight mode for this block.",e)),t?s[1]:"no-highlight"}return t.split(/\s+/).find((e=>p(e)||y(e)))}(e);if(p(s))return;if(S("before:highlightElement",{el:e,language:s}),e.children.length>0&&(d.ignoreUnescapedHTML||(console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk."),console.warn("https://github.com/highlightjs/highlight.js/wiki/security"),console.warn("The element with unescaped HTML:"),console.warn(e)),d.throwUnescapedHTML))throw new re("One of your code blocks includes unescaped HTML.",e.innerHTML);t=e;const i=t.textContent,r=s?f(i,{language:s,ignoreIllegals:!0}):E(i);e.innerHTML=r.value,function(e,t,s){const i=t&&n[t]||s;e.classList.add("hljs"),e.classList.add(`language-${i}`)}(e,s,r.language),e.result={language:r.language,re:r.relevance,relevance:r.relevance},r.secondBest&&(e.secondBest={language:r.secondBest.language,relevance:r.secondBest.relevance}),S("after:highlightElement",{el:e,result:r,text:i})}let k=!1;function L(){"loading"!==document.readyState?document.querySelectorAll(d.cssSelector).forEach(w):k=!0}function y(e){return e=(e||"").toLowerCase(),i[e]||i[n[e]]}function _(e,{languageName:t}){"string"==typeof e&&(e=[e]),e.forEach((e=>{n[e.toLowerCase()]=t}))}function x(e){const t=y(e);return t&&!t.disableAutodetect}function S(e,t){const s=e;r.forEach((function(e){e[s]&&e[s](t)}))}"undefined"!=typeof window&&window.addEventListener&&window.addEventListener("DOMContentLoaded",(function(){k&&L()}),!1),Object.assign(e,{highlight:f,highlightAuto:E,highlightAll:L,highlightElement:w,highlightBlock:function(e){return Y("10.7.0","highlightBlock will be removed entirely in v12.0"),Y("10.7.0","Please use highlightElement now."),w(e)},configure:function(e){d=le(d,e)},initHighlighting:()=>{L(),Y("10.6.0","initHighlighting() deprecated.  Use highlightAll() now.")},initHighlightingOnLoad:function(){L(),Y("10.6.0","initHighlightingOnLoad() deprecated.  Use highlightAll() now.")},registerLanguage:function(t,s){let n=null;try{n=s(e)}catch(e){if(K("Language definition for '{}' could not be registered.".replace("{}",t)),!a)throw e;K(e),n=o}n.name||(n.name=t),i[t]=n,n.rawDefinition=s.bind(null,e),n.aliases&&_(n.aliases,{languageName:t})},unregisterLanguage:function(e){delete i[e];for(const t of Object.keys(n))n[t]===e&&delete n[t]},listLanguages:function(){return Object.keys(i)},getLanguage:y,registerAliases:_,autoDetection:x,inherit:le,addPlugin:function(e){!function(e){e["before:highlightBlock"]&&!e["before:highlightElement"]&&(e["before:highlightElement"]=t=>{e["before:highlightBlock"](Object.assign({block:t.el},t))}),e["after:highlightBlock"]&&!e["after:highlightElement"]&&(e["after:highlightElement"]=t=>{e["after:highlightBlock"](Object.assign({block:t.el},t))})}(e),r.push(e)},removePlugin:function(e){const t=r.indexOf(e);-1!==t&&r.splice(t,1)}}),e.debugMode=function(){a=!1},e.safeMode=function(){a=!0},e.versionString="11.8.0",e.regex={concat:m,lookahead:g,either:b,optional:u,anyNumberOfTimes:h};for(const e in D)"object"==typeof D[e]&&t(D[e]);return Object.assign(e,D),e},de=ce({});de.newInstance=()=>ce({}),e.exports=de,de.HighlightJS=de,de.default=de},599:e=>{const t=["a","abbr","address","article","aside","audio","b","blockquote","body","button","canvas","caption","cite","code","dd","del","details","dfn","div","dl","dt","em","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","html","i","iframe","img","input","ins","kbd","label","legend","li","main","mark","menu","nav","object","ol","p","q","quote","samp","section","span","strong","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","ul","var","video"],s=["any-hover","any-pointer","aspect-ratio","color","color-gamut","color-index","device-aspect-ratio","device-height","device-width","display-mode","forced-colors","grid","height","hover","inverted-colors","monochrome","orientation","overflow-block","overflow-inline","pointer","prefers-color-scheme","prefers-contrast","prefers-reduced-motion","prefers-reduced-transparency","resolution","scan","scripting","update","width","min-width","max-width","min-height","max-height"],i=["active","any-link","blank","checked","current","default","defined","dir","disabled","drop","empty","enabled","first","first-child","first-of-type","fullscreen","future","focus","focus-visible","focus-within","has","host","host-context","hover","indeterminate","in-range","invalid","is","lang","last-child","last-of-type","left","link","local-link","not","nth-child","nth-col","nth-last-child","nth-last-col","nth-last-of-type","nth-of-type","only-child","only-of-type","optional","out-of-range","past","placeholder-shown","read-only","read-write","required","right","root","scope","target","target-within","user-invalid","valid","visited","where"],n=["after","backdrop","before","cue","cue-region","first-letter","first-line","grammar-error","marker","part","placeholder","selection","slotted","spelling-error"],r=["align-content","align-items","align-self","all","animation","animation-delay","animation-direction","animation-duration","animation-fill-mode","animation-iteration-count","animation-name","animation-play-state","animation-timing-function","backface-visibility","background","background-attachment","background-blend-mode","background-clip","background-color","background-image","background-origin","background-position","background-repeat","background-size","block-size","border","border-block","border-block-color","border-block-end","border-block-end-color","border-block-end-style","border-block-end-width","border-block-start","border-block-start-color","border-block-start-style","border-block-start-width","border-block-style","border-block-width","border-bottom","border-bottom-color","border-bottom-left-radius","border-bottom-right-radius","border-bottom-style","border-bottom-width","border-collapse","border-color","border-image","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-inline","border-inline-color","border-inline-end","border-inline-end-color","border-inline-end-style","border-inline-end-width","border-inline-start","border-inline-start-color","border-inline-start-style","border-inline-start-width","border-inline-style","border-inline-width","border-left","border-left-color","border-left-style","border-left-width","border-radius","border-right","border-right-color","border-right-style","border-right-width","border-spacing","border-style","border-top","border-top-color","border-top-left-radius","border-top-right-radius","border-top-style","border-top-width","border-width","bottom","box-decoration-break","box-shadow","box-sizing","break-after","break-before","break-inside","caption-side","caret-color","clear","clip","clip-path","clip-rule","color","column-count","column-fill","column-gap","column-rule","column-rule-color","column-rule-style","column-rule-width","column-span","column-width","columns","contain","content","content-visibility","counter-increment","counter-reset","cue","cue-after","cue-before","cursor","direction","display","empty-cells","filter","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink","flex-wrap","float","flow","font","font-display","font-family","font-feature-settings","font-kerning","font-language-override","font-size","font-size-adjust","font-smoothing","font-stretch","font-style","font-synthesis","font-variant","font-variant-caps","font-variant-east-asian","font-variant-ligatures","font-variant-numeric","font-variant-position","font-variation-settings","font-weight","gap","glyph-orientation-vertical","grid","grid-area","grid-auto-columns","grid-auto-flow","grid-auto-rows","grid-column","grid-column-end","grid-column-start","grid-gap","grid-row","grid-row-end","grid-row-start","grid-template","grid-template-areas","grid-template-columns","grid-template-rows","hanging-punctuation","height","hyphens","icon","image-orientation","image-rendering","image-resolution","ime-mode","inline-size","isolation","justify-content","left","letter-spacing","line-break","line-height","list-style","list-style-image","list-style-position","list-style-type","margin","margin-block","margin-block-end","margin-block-start","margin-bottom","margin-inline","margin-inline-end","margin-inline-start","margin-left","margin-right","margin-top","marks","mask","mask-border","mask-border-mode","mask-border-outset","mask-border-repeat","mask-border-slice","mask-border-source","mask-border-width","mask-clip","mask-composite","mask-image","mask-mode","mask-origin","mask-position","mask-repeat","mask-size","mask-type","max-block-size","max-height","max-inline-size","max-width","min-block-size","min-height","min-inline-size","min-width","mix-blend-mode","nav-down","nav-index","nav-left","nav-right","nav-up","none","normal","object-fit","object-position","opacity","order","orphans","outline","outline-color","outline-offset","outline-style","outline-width","overflow","overflow-wrap","overflow-x","overflow-y","padding","padding-block","padding-block-end","padding-block-start","padding-bottom","padding-inline","padding-inline-end","padding-inline-start","padding-left","padding-right","padding-top","page-break-after","page-break-before","page-break-inside","pause","pause-after","pause-before","perspective","perspective-origin","pointer-events","position","quotes","resize","rest","rest-after","rest-before","right","row-gap","scroll-margin","scroll-margin-block","scroll-margin-block-end","scroll-margin-block-start","scroll-margin-bottom","scroll-margin-inline","scroll-margin-inline-end","scroll-margin-inline-start","scroll-margin-left","scroll-margin-right","scroll-margin-top","scroll-padding","scroll-padding-block","scroll-padding-block-end","scroll-padding-block-start","scroll-padding-bottom","scroll-padding-inline","scroll-padding-inline-end","scroll-padding-inline-start","scroll-padding-left","scroll-padding-right","scroll-padding-top","scroll-snap-align","scroll-snap-stop","scroll-snap-type","scrollbar-color","scrollbar-gutter","scrollbar-width","shape-image-threshold","shape-margin","shape-outside","speak","speak-as","src","tab-size","table-layout","text-align","text-align-all","text-align-last","text-combine-upright","text-decoration","text-decoration-color","text-decoration-line","text-decoration-style","text-emphasis","text-emphasis-color","text-emphasis-position","text-emphasis-style","text-indent","text-justify","text-orientation","text-overflow","text-rendering","text-shadow","text-transform","text-underline-position","top","transform","transform-box","transform-origin","transform-style","transition","transition-delay","transition-duration","transition-property","transition-timing-function","unicode-bidi","vertical-align","visibility","voice-balance","voice-duration","voice-family","voice-pitch","voice-range","voice-rate","voice-stress","voice-volume","white-space","widows","width","will-change","word-break","word-spacing","word-wrap","writing-mode","z-index"].reverse();e.exports=function(e){const a=e.regex,l=(e=>({IMPORTANT:{scope:"meta",begin:"!important"},BLOCK_COMMENT:e.C_BLOCK_COMMENT_MODE,HEXCOLOR:{scope:"number",begin:/#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/},FUNCTION_DISPATCH:{className:"built_in",begin:/[\w-]+(?=\()/},ATTRIBUTE_SELECTOR_MODE:{scope:"selector-attr",begin:/\[/,end:/\]/,illegal:"$",contains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},CSS_NUMBER_MODE:{scope:"number",begin:e.NUMBER_RE+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",relevance:0},CSS_VARIABLE:{className:"attr",begin:/--[A-Za-z][A-Za-z0-9_-]*/}}))(e),o=[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE];return{name:"CSS",case_insensitive:!0,illegal:/[=|'\$]/,keywords:{keyframePosition:"from to"},classNameAliases:{keyframePosition:"selector-tag"},contains:[l.BLOCK_COMMENT,{begin:/-(webkit|moz|ms|o)-(?=[a-z])/},l.CSS_NUMBER_MODE,{className:"selector-id",begin:/#[A-Za-z0-9_-]+/,relevance:0},{className:"selector-class",begin:"\\.[a-zA-Z-][a-zA-Z0-9_-]*",relevance:0},l.ATTRIBUTE_SELECTOR_MODE,{className:"selector-pseudo",variants:[{begin:":("+i.join("|")+")"},{begin:":(:)?("+n.join("|")+")"}]},l.CSS_VARIABLE,{className:"attribute",begin:"\\b("+r.join("|")+")\\b"},{begin:/:/,end:/[;}{]/,contains:[l.BLOCK_COMMENT,l.HEXCOLOR,l.IMPORTANT,l.CSS_NUMBER_MODE,...o,{begin:/(url|data-uri)\(/,end:/\)/,relevance:0,keywords:{built_in:"url data-uri"},contains:[...o,{className:"string",begin:/[^)]/,endsWithParent:!0,excludeEnd:!0}]},l.FUNCTION_DISPATCH]},{begin:a.lookahead(/@/),end:"[{;]",relevance:0,illegal:/:/,contains:[{className:"keyword",begin:/@-?\w[\w]*(-\w+)*/},{begin:/\s/,endsWithParent:!0,excludeEnd:!0,relevance:0,keywords:{$pattern:/[a-z-]+/,keyword:"and or not only",attribute:s.join(" ")},contains:[{begin:/[a-z-]+(?=:)/,className:"attribute"},...o,l.CSS_NUMBER_MODE]}]},{className:"selector-tag",begin:"\\b("+t.join("|")+")\\b"}]}}},313:e=>{e.exports=function(e){const t=e.regex,s=t.concat(/[\p{L}_]/u,t.optional(/[\p{L}0-9_.-]*:/u),/[\p{L}0-9_.-]*/u),i={className:"symbol",begin:/&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/},n={begin:/\s/,contains:[{className:"keyword",begin:/#?[a-z_][a-z1-9_-]+/,illegal:/\n/}]},r=e.inherit(n,{begin:/\(/,end:/\)/}),a=e.inherit(e.APOS_STRING_MODE,{className:"string"}),l=e.inherit(e.QUOTE_STRING_MODE,{className:"string"}),o={endsWithParent:!0,illegal:/</,relevance:0,contains:[{className:"attr",begin:/[\p{L}0-9._:-]+/u,relevance:0},{begin:/=\s*/,relevance:0,contains:[{className:"string",endsParent:!0,variants:[{begin:/"/,end:/"/,contains:[i]},{begin:/'/,end:/'/,contains:[i]},{begin:/[^\s"'=<>`]+/}]}]}]};return{name:"HTML, XML",aliases:["html","xhtml","rss","atom","xjb","xsd","xsl","plist","wsf","svg"],case_insensitive:!0,unicodeRegex:!0,contains:[{className:"meta",begin:/<![a-z]/,end:/>/,relevance:10,contains:[n,l,a,r,{begin:/\[/,end:/\]/,contains:[{className:"meta",begin:/<![a-z]/,end:/>/,contains:[n,r,l,a]}]}]},e.COMMENT(/<!--/,/-->/,{relevance:10}),{begin:/<!\[CDATA\[/,end:/\]\]>/,relevance:10},i,{className:"meta",end:/\?>/,variants:[{begin:/<\?xml/,relevance:10,contains:[l]},{begin:/<\?[a-z][a-z0-9]+/}]},{className:"tag",begin:/<style(?=\s|>)/,end:/>/,keywords:{name:"style"},contains:[o],starts:{end:/<\/style>/,returnEnd:!0,subLanguage:["css","xml"]}},{className:"tag",begin:/<script(?=\s|>)/,end:/>/,keywords:{name:"script"},contains:[o],starts:{end:/<\/script>/,returnEnd:!0,subLanguage:["javascript","handlebars","xml"]}},{className:"tag",begin:/<>|<\/>/},{className:"tag",begin:t.concat(/</,t.lookahead(t.concat(s,t.either(/\/>/,/>/,/\s/)))),end:/\/?>/,contains:[{className:"name",begin:s,relevance:0,starts:o}]},{className:"tag",begin:t.concat(/<\//,t.lookahead(t.concat(s,/>/))),contains:[{className:"name",begin:s,relevance:0},{begin:/>/,relevance:0,endsParent:!0}]}]}}}},t={};function s(i){var n=t[i];if(void 0!==n)return n.exports;var r=t[i]={exports:{}};return e[i].call(r.exports,r,r.exports,s),r.exports}s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");if(i.length)for(var n=i.length-1;n>-1&&!e;)e=i[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),s(303)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,